![Evolution X](https://github.com/Evolution-X/manifest/raw/udc/EvoBanner.png)

Evolution X
===========

[![Download Evolution X](https://img.shields.io/sourceforge/dt/evolution-x.svg)](https://sourceforge.net/projects/evolution-x/files/latest/download)

### Sync ###

```bash

# Initialize local repository
repo init -u https://github.com/Evolution-X/manifest -b udc

# Sync
repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags
```

### Build ###

Using `lunch` commnd (recommended)
You can source the file build/envsetup.sh into your bash environment to get some shell functions to help the building:

`source build/envsetup.sh`
Now you can select a target by lunch command:

`lunch $TARGET_PRODUCT-$TARGET_BUILD_VARIANT`
where $TARGET_PRODUCT is any target described in the previous section, and possible values of $TARGET_BUILD_VARIANT are eng, user, userdebug. For example,

`lunch android_x86_64-userdebug`
Then you can build an iso file by m command:

`m -jX iso_img`
m command is equivalent to make, but you can use it in any subdirectory of the android-x86 tree. Replace X by the number of processors you have. For example, if you have a quad core CPU, replace X with 4:

`m -j4 iso_img`
Since froyo-x86, we also add menu selection to lunch command. Just type lunch, and you will get a list of available targets. Input the number to select a target. Alternatively, just type lunch $number.

To build an rpm file:

`m -jX rpm`
You need to install the rpm-build package (Fedora based distributions) or rpm package (Debian / Ubuntu based distributions) before building.

The rpm file could be installed to a Linux distribution directly.

Building directly
You may specify the target to be built by TARGET_PRODUCT variable. For example, to build an iso image for target android_x86, type:

`make -jX iso_img TARGET_PRODUCT=android_x86`
To generate a live cdrom iso for tegav2, type

`make -jX iso_img TARGET_PRODUCT=tegav2`
Then you will get an iso file out/target/product/x86/android_x86.iso, etc.

Using buildspec.mk
You can create a buildspec.mk in your android-x86 directory to remember a particular target product you build often:

``
TARGET_PRODUCT := android_x86_64
TARGET_BUILD_VARIANT := userdebug
TARGET_BUILD_TYPE := release
TARGET_KERNEL_CONFIG := android-x86_64_defconfig
``
With your buildspec.mk file in your android-x86 working directory, you can simply make by

`make -jX iso_img`

# Credits:

 * [**LineageOS**](https://github.com/LineageOS)
 * [**ParanoidAndroid**](https://github.com/AOSPA)
 * [**PixelDust**](https://github.com/PixelDust-Twelve)
 * [**ProtonAOSP**](https://github.com/ProtonAOSP)
 * [**BlissROMs**](https://github.com/BlissRoms)
 * [**Syberia Project**](https://github.com/syberia-project)
 * [**crDroid**](https://github.com/crdroidandroid)
 * [**Octavi-OS**](https://github.com/Octavi-OS)
 * [**hentaiOS**](https://github.com/hentaiOS)
 * [**POSP**](https://github.com/PotatoProject)
 * [**StatiXOS**](https://github.com/StatiXOS)
 * [**ArrowOS**](https://github.com/ArrowOS)
 * [**PixelExperience**](https://github.com/PixelExperience)
 * [**AICP**](https://github.com/AICP)
 * [**ShapeShiftOS**](https://github.com/ShapeShiftOS)
 * [**YAAP**](https://github.com/yaap)
 * [**PixelExtended**](https://github.com/PixelExtended)
 * [**AospExtended**](https://github.com/AospExtended)
 * [**Nitrogen OS**](https://github.com/nitrogen-project)
 * [**PixysOS**](https://github.com/PixysOS)
 * [**Havoc-OS**](https://github.com/Havoc-OS)
 * [**Xtended**](https://github.com/Project-Xtended)
 * [**ColtOS**](https://github.com/Colt-Enigma)
 * [**exTHmUI**](https://github.com/exTHmUI)

* And tons of other ROMs not mentioned above
